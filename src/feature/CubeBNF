
	I. Basic Symbols 
	II. Identifier 
	III. Numbers
	IV. Strings
	V. Expressions
	VI. Variables
	VII. -----------
	VIII. Arithmetic Expression
	IX. Boolean Expression
	X. Assignment Statement
	XI. Conditional Statement
	XII. Loop Statement
	XIII. Procedure Statement
	XIV. Procedure Declaration	

	PROGRAM

		<program> := <declaration> <main declaration> | <main declaration> <declaration> |
		<main declaration> | <declaration>

		<declaration> := <variable declaration> | <procedure declaration>	

		<main declaration> := fn main ( ) <procedure body> end				

		<procedure body> := <basic statement> | <code>

		<code> := <code> <basic statement>		

		<basic statement> := <assignment statement> | <procedure statement> | 
		<basic statement> <assignment statement> | <basic statement> <procedure statement> 		

	VARIABLE DECLARATION:

		<variable identifier> := <identifier>			
		
		<variable declaration> := <variable identifier>

	PROCEDURE DECLARATION
		
		<formal parameter> := <identifier>

		<formal parameter list> := <formal parameter> | <formal parameter list>, <formal parameter>

		<formal parameter part> := (<empty>) | (<formal parameter list>)

		<procedure heading> := <procedure identifier> <formal parameter part>

		<code> := <code> <basic statement>

		<procedure body> := <basic statement> | <code>

		<procedure declaration> := fn <procedure heading> <procedure body> end

	CONDITIONAL STATEMENTS
	
		<if clause> := if <boolean expression> do
		
		<basic statement> := <assignment statement> | <procedure statement> | <basic statement <assignment statement> | <basic statement> <procedure statement>

		<if statement> := <if clause> <basic statement>

		<conditional statement> := <if statement> end | <if statement> else do <conditional statement> end


	LOOP STATEMENTS
		
		<while clause> := while <boolean expression> do

		<basic statement> := <assignment statement> | <procedure statement> | 
		<basic statement> <assignment statement> | <basic statement> <procedure statement> 

		<while statement> := <while clause> <basic statement> | 
		<while clause> <while statement> <basic statement>

		<loop statement> := <while statement> end

	PROCEDURE STATEMENTS		

		<actual parameter> := <string> | <expression> | <procedure identifier>

		<actual parameter list> := <actual parameter> | <actual parameter list> , <actual parameter>

		<actual parameter part> := <empty> | (<actual parameter list>)

		<procedure statement> := <procedure identifier> <actual parameter part>


		Examples:	Transpose(W, v+1)
					Max(1, 2, 3, 4, 5)

		**Semantics:
			The procedure statement serves to invoke (call for) the execution of a procedure body.

	BASIC SYMBOLS:

		<basic symbol> := <letter> | <digit> | <logical value> | <delimiter>
	
		<letters> := a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
					|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z

		<digit> := 0|1|2|3|4|5|6|7|8|9

		<logical values> := true|false

		<delimiter> := <operator> | <separator> | <bracket> | <identifier> 
		
		<operator> := <arithmetic operator> | <relational operator> | <logical operator> | <sequential operator>
		
		<arithmetic operator> := + | - | * | / | % | ^
		
		<relational operator> := < | > | == | <= | >= | !=
		
		<logical operator> := & | | | !
		
		<sequential operator> := if | else | for 
		
		<separator> := # | ## | =
		
		<bracket> := ( | ) | [ | ] | do | end

	**Semantics: 
		Letters do not have individual meaning. They are used for 
		forming identifiers and strings. Digits are used for forming numbers,
		identifiers, and strings.

	
	IDENTIFIER Syntax:

		<identifier> := <letter> | <identifier> <letter> | <identifier> <digit>


		Examples: q, Soup, V12a, a32GkMPR, MARIA

		**Semantics:
			Identifiers have no inherent meaning, but serve for the identification of simple
			variables, and procedures. They may be chosen freely. The same identifier cannot 
			be used to denote two different quantities except when these quantities have disjoint scopes.

	NUMBERS Syntax:

		<unsigned integer> := <digit> | <unsigned integer> <digit>
		
		<integer> := <unsigned integer> | - <unsigned integer>
		
		<decimal fraction> := .<unsigned integer>

		<decimal number> := <unsigned integer> | <decimal fraction> | <unsigned integer> <decimal fraction>

		<unsigned number> := <decimal number>

		<number> := <unsigned number> | - <unsigned number>


		Examples: 0, 117, -117, .4123, 9.001, -.4123, -9.001


	STRINGS Syntax:

		<proper string> := <any sequence of basic symbols> | <empty>

		<string > := "<proper string>"


	EXPRESSIONS Syntax:

		<expression> := <arithmetic expression> | <boolean expression> 							


	ARITHMETIC EXPRESSIONS Syntax:

		<adding operator> := + | -
		
		<multiplying operator := * | / | %
		
		<primary> := <unsigned number> | <variable> | <function designator> | (arithmetic expression)

		<factor> := <primary> | <factor> ^ <primary>

		<term> := <factor> | <term> <multiplying operator> <factor>

		<simple arithmetic expression> := <term> | <adding operator> <term> | <simple arithmetic expression> <adding operator> <term>

		<if clause> := if <Boolean expression> 

		<arithmetic expression> := <simple arithmetic expression> | <if clause> <simple arithmetic expression> | <if clause> <simple arithmetic expression> else <arithmetic expression> 


	BOOLEAN EXPRESSIONS Syntax:

		<relational operator> := < | <= | = | >= | > | !=

		<relation> := <simple arithmetic expression> <relational operator> <simple arithmetic expression>

		<boolean primary> := <logical value> | <variable> | <function designator> | <relation> | (boolean expression)

		<boolean secondary> := <boolean primary> | !<boolean primary>

		<boolean factor> := <boolean secondary> | <boolean factor> && <boolean secondary>

		<boolean term> := <boolean factor> | <boolean term> || <boolean factor>

		<boolean expression> := <simple boolean> | <if clause> <boolean term> else <boolean expression>


	ASSIGNMENT STATEMENTS

		VERSION 1: Allowing multiple variables to be assigned to a value in one statement.
		

			<left part> := <variable> = 

			<left part list> := <left part> | <left part list> <left part>

			<assignment statement> := <left part list> <arithmetic expression> | <left part list> <boolean expression> | <left part list> <procedure identifier>



			Examples:	var1 = var2 = var3 = 1 + 1;
						var4 = var5 = true && false 

			**Semantics:
				Assignment statements serve for assigning the value of an expression to one or several
				variables. The expression of the statement (arithmetic or boolean) is evaluated in 
				sequence from left to right. 			
				Case <assignment statement> := <left part list> <procedure identifier>
				may only occur on procedures that return a value... e.g.
						
						var_name = getValue    

				where getValue is a procedure that returns a value. This option is irrelevant (at 
				least for now) if our language does not support procedures that return a value.
				Lastly, the value of the expression is assigned to all the left part variables.


		VERSION 2: Only one variable can be assigned in one statement.

			
			<left part> := <variable> = 			

			<assignment statement> := <left part> <arithmetic expression> | 
			<left part> <boolean expression> | <left part> <procedure identifier>


			Examples:	var1 = 1 + 1;
						var4 = true && false 


		

